/**
 * @class IGN.Explorer.UI
 * The User Interface Object that handles interaction
 * and contains the method for rendering operations
 * @author OSK
 */
IGN.UI = Ext.extend(Ext.Viewport, {
	/**
	 * Initializes de viewport layout using Ext.apply 
	 * @method initComponent
	 */
	initComponent: function () {
		Ext.apply(this, {
			layout:'absolute',
			border:false,
			items:[
				/**
				 * The map panel
				 * @property mapPanel
				 * @type IGN.mapPanel
				 */
				new IGN.mapPanel({
					id: 'mapPanel',
					ref:'mapPanel',
					tbar:new IGN.toolBar({ref:'../toolBar'}),
					x:0,y:0,
					cls:'x-unselectable',	
					anchor:'100% 100%',
					tooltip: 'Muestra el contenido actualmente desplegado sobre el mapa'
				}),
				/**
				 * The window with a 'card' layout that
				 * contains the search panel, the user objects panel
				 * and the measurements panel
				 * @property westPanel
				 * @type {Ext.Window} 
				 */
				new Ext.Window({
					layout:'card',
					x:0,y:44,
					activeItem:0,
					ref:'westPanel',
					initHidden:false,
					width:250,
					height:500,
					anchor:'25% 100%',
					resizable:true,
					closable:false,
					cls:'translucent-window',
					frame:false,
					shadow:false,
					closeAction:'hide',
					bbar: new Ext.ux.StatusBar( {
						defaultText: 'Listo'
					}),
					items: [
						/**
						 * The search panel
						 * @property searchPanel
						 * @type {IGN.searchPanel} 
						 */
						new IGN.searchPanel({
							id: 'searchPanel',
							ref:'../searchPanel',
							title:'Búsqueda',
							autoWidth:true,
							unstyled:true,
							/*
							 * Listeners For the panel to slide in and out when
							 * it's activated or deactivated
							 */
							listeners: {

								'activate':  function(p) {
									this.getEl().slideIn('l',{ duration: 0.5 });
								},
								'deactivate':  function() {
									this.getEl().slideOut('r', { duration: 0.5 });
								}
							}
						}),
						/**
						 * The user objects panel with
						 * object creation and editing tools
						 * @property dataPanel
						 * @type {Ext.Panel} 
						 */
						new Ext.Panel({
							id:'dataPanel',
							ref:'../dataPanel',
							unstyled:true,
							autoScroll:true,
							layout:'card',
							layoutConfig: {
								// layout-specific configuration
								activeOnTop:true,
								titleCollapse: true,
								animate: true,
								fill:false,
								autoWidth:true
							},
							/**
							 * An OpenLayers WMSFeatureInfo control
							 * reference used to handle WMS GetFeatureInfo requests
							 * @property
							 */
							WMSFeatureInfoControl: false,
							listeners: {
								/*
								* Listener for the panel to slide in and out when
								* it's activated or deactivated
								*/
								'activate':  function(p) {
									this.getEl().slideIn('r',{ duration: 0.5 });
								},
								'deactivate':  function() {
									this.getEl().slideOut('l',{ duration: 0.5 });
								},
								/*
								 * listener on render for attaching to
								 * the events generated by the OpenLayers WMSFeatureInfo
								 * control on reception of featureInfo from WMS servers.
								 * and updates the featureInfoPanel
								 */
								'render': function() {
									Ext.getCmp('mapPanel').map.WMSFeatureInfo.events.register(
										"getfeatureinfo",
										Ext.getCmp('mapPanel').map.WMSFeatureInfo,
										this.updateWMSFeatureInfo
									);
								}
							},
							items: [
								/**
								 * The panel where FeatureInfo requests data
								 * are shown
								 * @property featureInfoPanel
								 */
								new Ext.Panel({
									title:"Información del mapa",
									id:'featureInfoPanel',
									unstyled:true,
									autoScroll:true
								}),
								/**
								 * The panel with user objects
								 * editing tools
								 * @property objectsPanel
								 */
								new IGN.objectsPanel({
									id:'objectsPanel',
									title:"Objetos",
									unstyled:true
								}),
								/**
								 * The panel with measurements tools
								 * @property measurementsWindow
								 * @type IGN.measurementsWindow
								 */
								new IGN.measurementsWindow({
									ref:'../../measurementsWindow',
									id:'measurementsPanel',
									title:'Mediciones',
									unstyled:true,
									map:Ext.getCmp('mapPanel').map
								})
							],
							updateWMSFeatureInfo: function(event) {
							}
						})						
					]
				}),
				/**
				 * La ventana con el contenido del mapa
				 * @property contentPanel
				 * @type {Ext.Panel} 
				 */
				new IGN.contentPanel({
					id:'contentPanel',
					ref:'contentPanel',
					title:'Contenido del mapa',
					x:0,y:44,
					width:250,
					height:500,
					shadow:false,
					draggable:false,
					resizable:false,
					//initHidden:false,
					cls:'translucent-window',
					closeAction:'hide',
					autoScroll:true
				}),
				new Ext.Window({
					initHidden:true,
					border:false,
					framse:false,
					draggable:false,
					resizable:false,
					closable:false,
					closeAction:'hide',
					layout:new Ext.layout.CardLayout({
						/*
						 * Necesito esta opción para que los paneles
						 * se rendereen bien apenas se expande éste.
						 */
						deferredRender :true
					}),
					region:'west',
					x:0,y:70,
					activeTab:0,
					anchor:'20% 95%',
					width:250,
					frame:true,
					enableTabScroll: true,
					items: [
						new IGN.addContentsPanel({
							id:'addContentsPanel',
							ref:'../addContentsPanel',
							title:'Agregar contenido'
						}),
						new GeoExt.LegendPanel({
							id:'legendPanel',
							ref:'../legendPanel',
							autoScroll:true,
							title:'Leyenda del mapa',
							unstyled:true
						})
					]
				})
				
				
			]
		});
		this.addEvents(
			/**
			 * @event searchTriggered
			 * Se dispara cuando el usuario realiza una búsqueda
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */
			'searchTriggered',
			/**
			 * @event searchResultSelected
			 * Se dispara cuando el usuario selecciona un record
			 * de los resultados de búsqueda
			 * @param {String} query
			 */
			'searchResultSelected',
			/**
			 * @event addSearchResultRequested
			 * Se dispara cuando el usuario pide agregar
			 * el resultado de una búsqueda al mapa
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */
			'addSearchResultRequested',
			/**
			 * @event removeSearchResultRequested
			 * Se dispara cuando el usuario pide
			 * quitar del mapa un resultado de una búsqueda
			 * utilizando el link de 'quitar' <em>en el mismo
			 * panel de búsqueda</em>
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */
			'removeSearchResultRequested',
			/**
			 * @event removeFromContentsRequested
			 * Se dispara cuando el usuario pide quitar
			 * del mapa un resultado de una búsqueda usando
			 * el link de 'quitar' <em>en el panel de contenido de mapa</em>
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */
			'removeFromContentsRequested',
			/**
			 * @event lengthMeasurementSelected
			 * Se dispara cuando el usuario genera una medición
			 * de distancia.
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */
			'lengthMeasurementSelected',
			/**
			 * @event areaMeasurementSelected
			 * Se dispara cuando el usuario genera una medición
			 * de área.
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */			
			'areaMeasurementSelected',
			/**
			 * @event addMeasurementRequested
			 * Se dispara cuando el usuario genera pide que
			 * una medición sea agregada al contenido del mapa
			 * @param {Ext.data.Record} record
			 * @param {Ext.EventObject} event
			 */			
			'addMeasurementRequested',
			/**
			 * @event mapClicked
			 * Se dispara cuando el usuario clickea el mapa
			 * @param {Object} event El mismo objeto que recibe el event
			 * 'beforegetfeatureinfo' de OpenLayers.Control.WMSGetFeatureInfo.
			 * 
			 * <I>The event object has an <b>xy</b> property with the position of the mouse click or hover event that triggers the request.</i>
			 */
			'mapClicked',
			/**
			 * @event featureInfoRequested
			 * Se dispara cuando el usuario ha clickeado el mapa
			 * y seleccionado la opción de información del punto.
			 * @param {Object} event El mismo objeto que recibe el event
			 * 'getfeatureinfo' de OpenLayers.Control.WMSGetFeatureInfo.
			 * 
			 * <i>The event object has a <b>text</b> property with the body of the response (String),
			 * a <b>features</b>property with an array of the parsed features, an <b>xy</b> property with
			 * the position of the mouse click or hover event that triggered the request,
			 * and a request property with the request itself.</i>
			 */
			'featureInfoRequested',
			/**
			 *@event addPointRequested
			 */
			'addPointRequested',
			/**
			 *@event productsSearchRequested
 		     */
			'productsSearchRequested'
		);
		IGN.UI.superclass.initComponent.apply(this, arguments);
		
		this.toolBar = this.mapPanel.topToolbar;
		this.attachEventHandlers();
		this.attachToolbarEventHandlers();
	},
	/**
	 * Despliega el panel de Contenido
	 * anclado al westPanel y animado
	 */
	showContentPanel: function()
	{
		this.contentPanel.anchorTo(
			this.searchPanel.ownerCt.getEl(),
			'tr'
		);
		this.contentPanel.show(this.searchPanel.ownerCt.getEl());
	},
	/**
	 * Despliega el panel de Mediciones
	 */	
	showMeasurementsPanel: function()
	{
		this.westPanel.layout.setActiveItem('dataPanel');
		this.dataPanel.layout.setActiveItem('measurementsPanel');
	},
	/**
	 * Actualiza los elementos que tienen que moverse con la aparición
	 * o desaparción de la ventana de contenido
	 * Actualmente son:
	 * 
	 * - La barra de zoom y paneo
	 * 
	 * - la barra de escala
	 */
	updateAnchoredObjects: function()
	{
		if (this.contentPanel.isVisible()) {
			Ext.fly(this.mapPanel.map.PanZoomBar.div).anchorTo(this.contentPanel.getEl(),'tr');
			Ext.fly(this.mapPanel.map.ScaleLine.div).anchorTo(this.contentPanel.getEl(),'br',[0,-70]);
		} else {
			Ext.fly(this.mapPanel.map.PanZoomBar.div).anchorTo(this.westPanel.getEl(),'tr');
			Ext.fly(this.mapPanel.map.ScaleLine.div).anchorTo(this.westPanel.getEl(),'br',[0,-70]);
		}
		
	},
	/**
	 * Activa el panel 'dataPanel'
	 * en la ventana westPanel
	 */
	showDataPanel: function()
	{
		this.westPanel.layout.setActiveItem('dataPanel');
	},
	showFeatureInfoPanel: function()
	{
		this.westPanel.layout.setActiveItem('dataPanel');
		this.dataPanel.layout.setActiveItem(0);
	},
	showObjectsPanel: function()
	{
		this.westPanel.layout.setActiveItem('dataPanel');
		this.dataPanel.layout.setActiveItem('objectsPanel');
	},
	/**
	 * Activa el panel 'searchPanel'
	 * en la ventana westPanel
	 */ 
	showSearchPanel: function()
	{
		this.westPanel.layout.setActiveItem('searchPanel');
	},
	/**
	 * Muestra el gif de carga en el DataView del SearchPanel
	 */
	showSearchPanelAsLoading: function()
	{
		this.searchPanel.DataView.onBeforeLoad();
	},
	/**
	 * Borra los resultados de búsqueda actuales
	 */
	clearSearchResults: function()
	{
		this.searchPanel.DataView.store.removeAll();
	},
	/**
	 * Actualiza el DataView con los resultados de
	 * búsqueda. Agrega al store del DataView los records
	 * pasados como parámetros
	 * @param {Ext.data.Records arr} records
	 */ 
	updateSearchResults: function(records)
	{
		this.searchPanel.DataView.store.add(records);
		this.searchPanel.DataView.refresh();
	},
	/**
	 * Devuelve True si el record aun se encuentra en los resultados actuales
	 * del panel de búsqueda.
	 * False si el record ya no está en el resultado de la búsqueda.
	 * Es decir, si el usuario realizó otra búsqueda
	 * $param {Ext.data.Record} record El record que se quiere
	 * ubicar entre los resultados de la búsqueda actual
	 * @returns {boolean}
	 */
	recordStillInSearchResults: function(record)
	{
		return this.searchPanel.DataView.store.getById(record.id);
	},
	/**
	 * Cambia el estilo del botón de agregar
	 * en un record de resultado de búsqueda
	 * para que se note que no está agregado al mapa
	 * @param {Ext.data.Record} record El record que se desea afectar
	 */
	showSearchResultAsNotAdded: function(record) {
		var stillInSearchPanel = this.searchPanel.DataView.store.getById(record.id);
		var node = this.searchPanel.DataView.getNode(stillInSearchPanel);
		var removeLink = Ext.get(node).query('.removeLink');
		Ext.get(removeLink).removeClass('removeLink');
		Ext.get(removeLink).addClass('addLink');
	},
	/**
	 * Cambia el estilo del botón de agregar
	 * en un record de resultado de búsqueda
	 * para que se note que ya fue está agregado al mapa
	 * @param {Ext.data.Record} record El record que se desea afectar
	 */	
	showSearchResultAsAdded: function(record)
	{
		var stillInSearchPanel = this.searchPanel.DataView.store.getById(record.id);
		var node = this.searchPanel.DataView.getNode(stillInSearchPanel);
		var removeLink = Ext.get(node).query('.addLink');
		Ext.get(removeLink).removeClass('addLink');
		Ext.get(removeLink).addClass('removeLink');
	},
	showMapClickMarker: function(xy)
	{
		var lonlat = this.mapPanel.map.getLonLatFromPixel(new OpenLayers.Pixel(xy.x,xy.y));
		var size = new OpenLayers.Size(64,64);
		var url = IGN.Explorer.URL +'/img/marker.gif';
		var offset = new OpenLayers.Pixel(-33,-58);
		var icon = new OpenLayers.Icon(url,size,offset);
		
		if(this.clickMarker) {
			this.hideMapClickMarker();
		}
		
		this.clickMarker = new OpenLayers.Marker(lonlat,icon);
		
		this.mapPanel.map.getLayersByName('Marcadores temporales')[0].addMarker(this.clickMarker);
		

	},
	hideMapClickMarker: function(xy)
	{
		this.mapPanel.map.getLayersByName('Marcadores temporales')[0].removeMarker(this.clickMarker);
	},
	/**
	 * Handler de click sobre el mapa
	 * Dispara el evento mapClicked {#mapClicked}
	 */
	onMapClicked: function(event)
	{
		this.fireEvent('mapClicked', event);
		menuLoco = new Ext.menu.Menu({
			cls:'translucent-window',
			floating:true,
			title:'none',
			items:[{
				text:'Información de este punto',
				handler:this.showFeatureInfoPanel.createDelegate(this)
			},/*{
				text:'Crear objeto aquí',
				handler: function() {
					var lonlat = IGN.Explorer.UI.mapPanel.map.getLonLatFromPixel(new OpenLayers.Pixel(event.xy.x, event.xy.y));
					var record = new IGN.UserObjectRecord({
						title: 'Punto ',
						description: '',
						feature:'hola'
					});
					this.fireEvent('addPointRequested',record);
				}.createDelegate(this)
			},*/{
				xtype:'menuseparator'
			},{
				text:'Medir distancia',
				handler: function() {
					this.hideMapClickMarker();
					this.showMeasurementsPanel();
					this.measurementsWindow.length.activate();
					IGN.Explorer.UI.msg('Medir distancia', ' Haga clic sobre el mapa para marcar los vértices' +
						' de un camino de varios segmentos.' +
						' Haga doble clic para finalizar la medición.');
				}.createDelegate(this)
			},{
				text:'Medir área',
				handler: function() {
					this.hideMapClickMarker();
					this.showMeasurementsPanel();
					this.measurementsWindow.area.activate();
				}.createDelegate(this)
			},{				
				xtype:'menuseparator'
			},{
				text:'Buscar productos en esta zona',
				handler: function() {
					this.fireEvent('productsSearchRequested', event.xy);
				}.createDelegate(this)				
			},{
				xtype:'menuseparator'
			},{
				text:'Alejar',
				handler: function() {
					this.mapPanel.map.zoomOut();
				}.createDelegate(this)
			},{
				text:'Acercar',
				handler: function() {
					this.mapPanel.map.zoomIn();
				}.createDelegate(this)								
			},{				
				xtype:'menuseparator'
			},{
				text:'Cancelar',
				handler: function() {
					this.hideMapClickMarker();
				}.createDelegate(this)
			}]
		});
		
		menuLoco.showAt(event.xy);
		menuLoco.setPagePosition(event.xy.x+50,event.xy.y);
		this.showMapClickMarker(event.xy);
	},
	/**
	 * Handler del vento featureInfoReceived que
	 * genera el mapa al recibir la respuesta desde todos
	 * los servidores consultados con GetFeatureInfo de WMS
	 */
	onFeatureInfoReceived: function(event)
	{
		var map = this.mapPanel.map;
		//map.removePopup(map.WMSFeatureInfoPopup);
		//
		//map.addPopup(
		//	map.WMSFeatureInfoPopup=
		//	new OpenLayers.Popup.FramedCloud(
		//		"chicken", 
		//		map.getLonLatFromPixel(event.xy),
		//		null,
		//		event.text,
		//		null,
		//		true
		//	)
		//);
		this.dataPanel.get(0).update(event.text);
	},
	createToponymyMarker: function(record)
	{
		var map = this.mapPanel.map;
		var zoom = 9; //zoom por default
		
		if (record.data.minx && record.data.miny) {
			zoom = map.getZoomForExtent(
				new OpenLayers.Bounds(
					record.data.minx, record.data.miny,
					record.data.maxx, record.data.maxy
				)
			);
		}
		var lonlat = new OpenLayers.LonLat(record.data.lon, record.data.lat);
		map.setCenter(lonlat, zoom);

		var size = new OpenLayers.Size(32,32);
		var url = IGN.Explorer.URL +'/img/marker.png';
		var offset = new OpenLayers.Pixel(-19,-26);
		var icon = new OpenLayers.Icon(url,size,offset);
			/*
			 * para que el ícono tenga el cursor 
			 * de manito
			 */
		icon.imageDiv.style.cursor="pointer";
		
		var marker = new OpenLayers.Marker(lonlat,icon);
		
		map.getLayersByName('Marcadores permanentes')[0].addMarker(marker);
		Ext.fly(icon.imageDiv).frame();

			/*
			 * Registro handler de evento para el clic
			 * sobre el marcador para desplegar información
			 */
		map.events.registerPriority('click', marker, function(){});
		return marker;
	},
	createToponymyTempMarker: function(record)
	{
		var app = IGN.Explorer;
		var map = this.mapPanel.map;
		var zoom = 9; //zoom por default
		var tempMarker = false;
		/*
		 * Si el el record posee encuadre greográfico (extent)
		 * en la base de datos, se calcula el nivel de zoom 
		 * adecuado para ese encuadre
		 */
		if (record.data.minx && record.data.miny) {
			zoom = map.getZoomForExtent(
				new OpenLayers.Bounds(
					record.data.minx, record.data.miny,
					record.data.maxx, record.data.maxy
				)
			);
		}
		var lonlat = new OpenLayers.LonLat(record.data.lon, record.data.lat);
		map.setCenter(lonlat, zoom);
		tempMarker = new OpenLayers.Marker(lonlat);
		map.getLayersByName('Marcadores permanentes')[0].addMarker(tempMarker);
		return tempMarker;
	},
	destroyToponymyMarker: function(marker)
	{
		var map = this.mapPanel.map;
		
		if (marker) {
			map.getLayersByName('Marcadores permanentes')[0].removeMarker(marker);
			return true;
		} else {
			return false;
		}
	},	
	destroyToponymyTempMarker: function(marker)
	{
		var map = this.mapPanel.map;
		
		if (marker) {
			map.getLayersByName('Marcadores temporales')[0].removeMarker(marker);
			return true;
		} else {
			return false;
		}
	},
	onLayerloadstart: function()
	{
		this.msg('hola', 'pipa');
	},
	onLayerloadend: function()
	{
		
	},
	/**
	 * Registra los handlers de eventos
	 * para responder a todos los componentes gráficos
	 * y disparar el evento apropiado para
	 * que el controller (App) responda
	 */
	attachEventHandlers: function()
	{
		/*
		 * para mover la barra de escala y el control Paneo y Zoom
		 */
		this.searchPanel.addListener('afterlayout', this.updateAnchoredObjects.createDelegate(this));
		this.contentPanel.addListener('show', this.updateAnchoredObjects.createDelegate(this));
		this.contentPanel.addListener('hide', this.updateAnchoredObjects.createDelegate(this));
		
		this.searchPanel.on({
			'searchTriggered': function(query) {
				this.fireEvent('searchTriggered',query);
			}.createDelegate(this)
		});		
		this.searchPanel.DataView.on({
			'recordclicked': function(record, event) {
				this.fireEvent('searchResultSelected',record, event);
			}.createDelegate(this)
		});	
		this.searchPanel.DataView.on({
			'addbuttonclicked': function(record, event) {
				this.fireEvent('addSearchResultRequested',record, event);
				this.showSearchResultAsAdded(record);
			}.createDelegate(this)
		});	
		this.searchPanel.DataView.on({
			'removebuttonclicked': function(record, event) {
				this.fireEvent('removeSearchResultRequested', record, event);
				this.showSearchResultAsNotAdded(record);
			}.createDelegate(this)
		});
		
		this.contentPanel.DataView.on({
			'removebuttonclicked': function(record, event) {
				this.fireEvent('removeFromContentsRequested', record, event);
			}.createDelegate(this)
		});
		
		this.measurementsWindow.on({
			'lengthadded': function(record, event) {
				this.fireEvent('lengthMeasurementSelected', record, event);
			}.createDelegate(this)
		});
		this.measurementsWindow.on({
			'areaadded': function(record, event) {
				this.fireEvent('areaMeasurementSelected', record, event);
			}.createDelegate(this)
		});
		this.measurementsWindow.on({
			'addbuttonclicked': function(record, event) {
				this.fireEvent('addMeasurementRequested', record, event);
			}.createDelegate(this)
		});
		
		this.mapPanel.on({
			'mapClicked': this.onMapClicked.createDelegate(this)
		});
		
		this.mapPanel.on({
			'featureInfoReceived': this.onFeatureInfoReceived.createDelegate(this)
		});
	},
	/**
	 * Configura los handlers de los eventos
	 * que generan los botones de la barra de herramientas
	 */
	attachToolbarEventHandlers : function()
	{
		this.toolBar.buttonSearch.on({
		   'click': function() {
				this.showSearchPanel();
		   }.createDelegate(this)
		});
		this.toolBar.buttonMeasurements.on({
			'click': function() {
				this.showMeasurementsPanel();
			}.createDelegate(this)
		});
		this.toolBar.buttonMapObjects.on({
			'click': function() {
				this.showObjectsPanel();
			}.createDelegate(this)
		});			
		
		this.toolBar.buttonContents.on({
			'click': function() {
				this.showContentPanel();
			}.createDelegate(this)
		});
		this.toolBar.get('button_ayuda').menu.get('button_acercade').on({
			'click': this.acercaDe.createDelegate(this)
		});
	},	
	/**
	 * Despliega un Ext.MessageBox
	 * con la información acerca de la autoría
	 * del visualizador
	 */
	acercaDe: function()
	{
		Ext.MessageBox.show({
			title:'Acerca del Explorador IGN',
			msg: '<img src="'+IGN.Explorer.URL+'/img/SignLogo.png"/><br/>'+
				'Desarrollado por<br/>'+
				'Unidad de Tecnologías de la Información del <br/>'+
				'<a href="http://www.ign.gob.ar"><img src="http://www.ign.gob.ar/sites/all/themes/ign/logo.png"/></a><br/>'+
				'Instituto Geográfico Nacional de la República argentina'
		});

	},
	msgCt: false,
	msg: function(title, format){
		function createBox(title, s){
			return ['<div class="msg">',
					'<div class="x-box-tl"><div class="x-box-tr"><div class="x-box-tc"></div></div></div>',
					'<div class="x-box-ml"><div class="x-box-mr"><div class="x-box-mc"><h3>', title, '</h3>', s, '</div></div></div>',
					'<div class="x-box-bl"><div class="x-box-br"><div class="x-box-bc"></div></div></div>',
					'</div>'].join('');
		}
		if(!this.msgCt){
			this.msgCt = Ext.DomHelper.insertFirst(document.body, {id:'msg-div'}, true);
		}
		this.msgCt.alignTo(document, 't-t');
		var s = String.format.apply(String, Array.prototype.slice.call(arguments, 1));
		var m = Ext.DomHelper.append(this.msgCt, {html:createBox(title, s)}, true);
		m.slideIn('t').pause(IGN.Explorer.options.msgTimeVisible).ghost("t", {remove:true});
	}
});
